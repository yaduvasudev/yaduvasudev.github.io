[
  {
    "objectID": "courses/6014/20/index.html",
    "href": "courses/6014/20/index.html",
    "title": "CS6014 Computability and Complexity",
    "section": "",
    "text": "Coordinates\n\nWhere: Online\nWhen: A slot (Mon: 8 - 8.50; Tue: 12 - 12.50; Thu: 11 - 11.50; Fri: 10 - 10.50)\n\n\n\nObjectives\nThis course builds on the topics covered in CS2200 - Languages, Machines and Computation as we delve deeper into computability theory and complexity theory. The aim of the course is to introduce the rich structural theory of computability and complexity. This course is a starting point for more advanced courses in theoretical computer science. In particular, this course is a strict pre-requisite for CS6840 - Modern Complexity Theory offered in the even semesters.\n\n\nContents\nThe following is a brief overview of the topics that will be covered in this course. The order of the topics covered may vary. - Computability theory - Turing machines, undecidability, Arithmetic and analytical hierarchy, Recursion theorem, Incompleteness theorem. - Complexity theory - Time complexity, Space complexity, Hierarchy theorems, Randomized complexity and interactive proofs, Counting complexity.\n\n\nReferences\n[K1]: Automata and Computability - Dexter C. Kozen\n[K2]: Theory of Computation - Dexter C. Kozen\n[AB]: Computational Complexity: A Modern Approach - Sanjeev Arora and Boaz Barak\n[DK]: Theory of Computational Complexity - Ding-Zhu Du and Ker-I Ko\nThere are a large number of lecture notes and resources available online, which we will refer to during the course.\n\n\nGrading policy\nAssignments: 40%\nScribing: 10%\nCourse reading: 10%\nMid-sem: 10%\nEnd-sem + viva: 30%\n\n\nImportant dates\nProblem Sets (deadlines): Sep 18, Oct 2, Oct 16, Oct 30, Nov 15, Nov 29\nMid-sem: Oct 20\nEnd-sem: Dec 15\n\n\nCourse Materials\nMoodle\nLectures and references"
  },
  {
    "objectID": "courses/2200/24/index.html",
    "href": "courses/2200/24/index.html",
    "title": "CS2200 Languages, Machines, and Computation",
    "section": "",
    "text": "aboutcontentsadministrivialectures\n\n\n\n\n\n\n\n\n\n\n Coordinates\n\nWhere: CS15\nWhen: B slot - Mon (9 am), Tue (8 am), Wed (1 pm), Fri (11 am)\n\n\n\n Instructor\n\nYadu Vasudev\nSSB 207\nyadu@cse.iitm.ac.in\n\n\n\n TAs\n\nAkash (cs22d012@smail)\nBalakrishnan (cs20b012@smail)\nBhabya (cs21d200@smail)\nKumaresan (cs21b045@smail)\nNagashri (cs21d004@smail)\nNarayana (cs22s004@smail)\nSampriti (cs18d200@smail)\nSubramanian (cs23m067@smail)\nTahir (cs20b078@smail)\nVishnu (cs23m073@smail)\n\n\n\n\n Important links\n\nMoodle (for problem sets)\nEd Discussions (for discussions, Q/A, announcements)\nJoin using your smail/iitm ids via this link\nAnonymous course feedback\n\n\n\n\n\n\n\n\n About this course\nThis course provides an introduction to the mathematical theory of computation. The course gives a preliminary exposure to theoretical computer science, and the formal relationships among machines and computational problems with the aim of understanding the nature of computation and its inherent limits.\nPrerequisites - A basic course in discrete mathematics (CS1200 or equivalent) is a useful prerequisite for the course. This course is mathematical in nature, and will involve formal reasoning and writing proofs which is typically covered in CS1200.\n\n\n\n Course contents\nThe following is a brief overview of the topics that will be covered in this course. The order of the topics covered may vary.\n\nFinite-State Machines and Regular Languages: Languages vs Computational problems, Deterministic and non-deterministic finite state automata, regular languages, closure properties, limitations - pumping lemma and Myhill-Nerode relations, state minimization, equivalent models, algorithmic questions.\nContext-Free Grammars: Grammars, Chomsky hierarchy, normal forms, closure properties, limitations - pumping lemma, algorithmic questions - parsing algorithm, equivalent models - push-down automata.\nComputability Theory - Turing machines, equivalence between different variants, Universal Turing machine, recursively enumerable and recursive sets of languages, Decidability - Halting Problem, Church-Turing thesis.\nBasic Complexity Theory - Measures of complexity, complexity classes P and NP, notion of polynomial-time reducibility, NP-completeness, satisfiability and the statement of Cook’s theorem.\n\n\n\n\n Course resources\nThere are many textbooks and resources (both offline and online) that cover most of the material presented in the list above. We will not be following one textbook. Our main sources of reference will be the following textbooks.\n\n[K]: Automata and Computability - Dexter C. Kozen\n[HMU]: Introduction to Automata Theory, Languages and Computation - Hopcroft, Motwani and Ullman, 3rd Edition\n[S]: Introduction to the Theory of Computation - Michael Sipser, 3rd Edition\n\nAll these books contain a number of exercise problems for practice.\n\n\n\n\n\n\n\n\n Weekly schedule\nThere are three lectures per week and a tutorial. The tutorials are scheduled based on the amount of material covered in the lectures, and are ungraded. The tentative dates of the quizzes, tests, and tutorials are given below. We will try to stick to this schedule as much as possible.\n\n\n\n Grading policy (tentative)\nThe course will be evaluated through a series of quizzes and finally the end-sem. I will be releasing problem sets on a weekly basis, and we will have tutorial sessions to discuss the these problems and possible approaches to solving them. The tentative grading scheme is as follows.\n\n\n\n\n\n\nGrading pattern\n\n\n\n\nClass tests: 3*10 = 30% (best 3/4)\nQuiz 1 & 2: 2 * 15 = 30%\nEnd-sem: 40%\n\n\n\n\n\n\n Important dates (tentative)\nPlease note the following dates for the ungraded tutorials and class tests. The dates for Quiz 1,2 and end-semester examination will be as per the institute calendar.\n\n\n\n\n\n\nDates\n\n\n\n\n\n\n\n\n\n\nTutorials\nJan 24, Feb 02, Feb 16, Mar 01, Mar 15, Mar 27, Apr 05, Apr 19, Apr 26\n\n\nClass tests\nFeb 09, Mar 06, Apr 12 16 , May 03 01\n\n\nQuiz 1\nFeb 20\n\n\nQuiz 2\nMar 19\n\n\nEnd-sem\nMay 07\n\n\n\n\n\n\n\n\n Communication\nPlease sign up on the course discussion forum here. This will be the first point of contact for any issues related to the course. For general questions related to the course (any comments/doubts), please create a thread in the correct category and add your question/comment there. You are encouraged to reply and clear the doubts of your friends. To encourage this interaction, the forum supports anonymous posts and answers. Please be courteous to others when you are posting anonymously.\n\n\n\n\n\n\n\n\n  \n    Date\n    Lecture\n    References\n    Misc\n  \n  \n    \n       Lecture #1 \n        Wed 17/01\n      \n      \n        Introduction to the course • Admin and logistics • Brief history of computing \n      \n      \n      \n      \n        PS0 released Register on Ed Discussions\n      \n    \n    \n       Lecture #2 \n        Fri 19/01\n      \n      \n        Languages vs problems • Alphabets, strings and languages \n        [notes]\n      \n      \n        \n          Chapter 0 - [S]\n        \n        \n          Lectures 1 and 2 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #3 \n        Tue 23/01\n      \n      \n        Languages and Problems • Uncountability of the set of all languages • Machine models \n        [notes]\n      \n      \n        \n          Section 2.1 - [HMU]\n        \n        \n          Section 1.1 - [S]\n        \n      \n      \n      \n    \n    \n       Lecture #4 \n        Wed 24/01\n      \n      \n        Programs with read-once inputs and bounded memory - states and transitions • DFAs - formal definition • Examples \n        [notes]\n      \n      \n        \n          Lecture 3 - [K]\n        \n        \n          Section 1.1 - [S]\n        \n        \n          Section 2.1, 2.2.1, 2.2.2 - [HMU]\n        \n      \n      \n      \n    \n    \n       Lecture #5 \n        Mon 29/01\n      \n      \n        DFA - formal definition, notion of acceptance, regular languages, examples • Formal proof correctness of construction - examples \n        [notes]\n      \n      \n        \n          Lectures 3, 4 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #6 \n        Tue 30/01\n      \n      \n        DFA - proving correctness • Operations on languages - union, intersection, concatenation, Kleene star, examples • Closure properties of regular languages \n        [notes]\n      \n      \n        \n          Lectures 2, 4 - [K]\n        \n      \n      \n        PS1 released\n      \n    \n    \n       Lecture #7 \n        Wed 31/01\n      \n      \n        Closure properties of regular languages - union, intersection, complement, examples • Concatenation of regular languages - the need to guess \n        [notes]\n      \n      \n        \n          Lecture 4 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #1\n        Fri 02/02\n      \n      \n        Based on Problem sets 0 and 1\n      \n      \n      \n      \n      \n    \n    \n       Lecture #8 \n        Mon 05/02\n      \n      \n        Non-determinism - examples and definitions • Equivalent models - multiple start states, \\( \\varepsilon \\)-transitions \n        [notes]\n      \n      \n        \n          Lecture 5 - [K]\n        \n        \n          Section 2.2 - [S]\n        \n        \n          Sections 2.3.1 to 2.3.4 - [HMU]\n        \n      \n      \n      \n    \n    \n       Lecture #9 \n        Tue 06/02\n      \n      \n        Equivalent definitions - multiple start states, \\( \\varepsilon \\)-transitions, examples • Concatenation and Kleene star using NFAs • From NFAs to DFAs \n        [notes]\n      \n      \n        \n          Lectures 5,6 - [K]\n        \n        \n          Section 2.2 - [S]\n        \n        \n          Section 2.3.5 - [HMU]\n        \n      \n      \n      \n    \n    \n       Lecture #10 \n        Wed 07/02\n      \n      \n        Equivalence of NFAs and DFAs - construction and examples • More closure properties using NFAs \n        [notes]\n      \n      \n        \n          Lecture 6 - [K]\n        \n        \n          Section 2.2 - [S]\n        \n        \n          Sections 2.3.5 - [HMU]\n        \n      \n      \n      \n    \n    \n      \n        Test #1\n        Fri 09/02\n      \n      \n        Based on Lectures 1 - 7 (Problem sets 0 and 1)\n      \n      \n      \n      \n      \n    \n    \n       Lecture #11 \n        Mon 12/02\n      \n      \n        Non-regular languages - examples and proof ideas • Formalizing the idea - statement of the pumping lemma \n        [notes]\n      \n      \n        \n          Lecture 11 - [K]\n        \n      \n      \n        PS2 released\n      \n    \n    \n       Lecture #12 \n        Tue 13/02\n      \n      \n        Pumping lemma - statement and proof • Contrapositive form - examples \n        [notes]\n      \n      \n        \n          Lecture 11 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #13 \n        Wed 14/02\n      \n      \n        Pumping lemma - more examples and uses \n        [notes]\n      \n      \n        \n          Lectures 11, 12 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #2\n        Fri 16/02\n      \n      \n        Based on Problem set 2\n      \n      \n      \n      \n      \n    \n    \n       Lecture #14 \n        Mon 19/02\n      \n      \n        Distinguishable and indistinguishable strings • Using distinguishable strings to prove non-regularity • Indistinguihability as an equivalence relation \n        [notes]\n      \n      \n        \n          class notes\n        \n        \n          Lecture 15 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Quiz #1\n        Tue 20/02\n      \n      \n        Based on Lectures 1 - 13 (Problem sets 0, 1, and 2)\n      \n      \n      \n    \n    \n       Lecture #15 \n        Wed 21/02\n      \n      \n        Myhill-Nerode relations • Indistinguishability relation as a Myhill-Nerode relation • From DFAs to Myhill-Nerode relations \n        [notes]\n      \n      \n        \n          Lecture 15 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #16 \n        Fri 23/02\n      \n      \n        From Myhill-Nerode relations to DFAs - construction, examples • Coarsest Myhill-Nerode relation \n        [notes]\n      \n      \n        \n          Lecture 15 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #17 \n        Tue 27/02\n      \n      \n        Coarsest Myhill-Nerode relation • Uniqueness of minimal DFA • Quotient construction and the minimization algorithm \n        [notes]\n      \n      \n        \n          Lectures 13, 16 - [K]\n        \n      \n      \n        PS3 released\n      \n    \n    \n       Lecture #18 \n        Wed 28/02\n      \n      \n        Quotient construction and minimization algorithm • Regular expressions \n        [notes]\n      \n      \n        \n          Lectures 13, 14 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #3\n        Fri 01/03\n      \n      \n        Based on Problem set 3\n      \n      \n      \n      \n      \n    \n    \n       Lecture #19 \n        Mon 04/03\n      \n      \n        Regular expressions - pattern matching, examples • From regular expressions to DFAs - construction, examples, complexity \n        [notes]\n      \n      \n        \n          Lectures 8 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #20 \n        Tue 05/03\n      \n      \n        From DFA to regex - state elimination, examples • Decision problems on regular languages and their complexity \n        [notes]\n      \n      \n        \n          Section 1.3 - [S]\n        \n        \n          Sections 3.2.2, 4.3 - [HMU]\n        \n      \n      \n      \n    \n    \n      \n        Test #2\n        Wed 06/03\n      \n      \n        Based on Lectures 14 - 18 (Problem set 3)\n      \n      \n      \n      \n      \n    \n    \n       Lecture #21 \n        Mon 11/03\n      \n      \n        Context-Free Languages(CFL) - motivation, definition • Context-Free Grammars (CFG) - examples, derivations \n        [notes]\n      \n      \n        \n          Lecture 19 - [K]\n        \n        \n          Section 2.1 - [S]\n        \n      \n      \n        PS4 released\n      \n    \n    \n       Lecture #22 \n        Tue 12/03\n      \n      \n        Context-Free Grammars (CFG) - more examples and constructions, the Dyck language \n        [notes]\n      \n      \n        \n          Lecture 20 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #23 \n        Wed 13/03\n      \n      \n        Dyck language (contd) • Regular languages and linear grammars • Parse trees \n        [notes]\n      \n      \n        \n          Lecture 20 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #4\n        Fri 15/03\n      \n      \n        Based on Problem set 4\n      \n      \n      \n      \n      \n    \n    \n       Lecture #24 \n        Mon 18/03\n      \n      \n        Ambiguity in grammars - leftmost derivations and parse trees • Examples - arithmetic expressions, dangling else • Closure properties of CFLs \n        [notes]\n      \n      \n        \n          Section 2.1 - [S]\n        \n        \n          Section 5.2, 5.4 - [HMU]\n        \n      \n      \n      \n    \n    \n      \n        Quiz #2\n        Tue 19/03\n      \n      \n        Based on Lectures 14 - 20 (Problem sets 3 and 4)\n      \n      \n      \n    \n    \n       Lecture #25 \n        Wed 20/03\n      \n      \n        Chomsky Normal Form - removing unit productions and \\( \\varepsilon \\)-productions \n        [notes]\n      \n      \n        \n          Lecture 21 - [K]\n        \n        \n          Section 2.1 - [S]\n        \n      \n      \n      \n    \n    \n       Lecture #26 \n        Fri 22/03\n      \n      \n        Chomsky Normal Form • Pumping lemma for CFLs - statement and examples \n        [notes]\n      \n      \n        \n          Lecture 22 - [K]\n        \n        \n          Section 2.3 - [S]\n        \n      \n      \n        PS5 released\n      \n    \n    \n       Lecture #27 \n        Tue 26/03\n      \n      \n        Pumping lemma for CFLs - examples • Closure properties of CFL \n        [notes]\n      \n      \n        \n          Lecture 22 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #5\n        Wed 27/03\n      \n      \n        Based on Problem set 5\n      \n      \n      \n      \n      \n    \n    \n       Lecture #28 \n        Mon 01/04\n      \n      \n        Cocke-Kasami-Younger (CKY) algorithm for parsing CFGs \n        [notes]\n      \n      \n        \n          Lecture 27 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #29 \n        Tue 02/04\n      \n      \n        Pushdown Automata (PDA) - definitions, acceptance conditions, examples \n        [notes]\n      \n      \n        \n          Lecture 23 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #30 \n        Wed 03/04\n      \n      \n        Equivalence of PDAs and CFGs \n        [notes]\n      \n      \n        \n          Lectures 24,25 - [K]\n        \n      \n      \n        PS6 released\n      \n    \n    \n      \n        Tutorial #6\n        Fri 05/04\n      \n      \n        Based on Problem set 6\n      \n      \n      \n      \n      \n    \n    \n       Lecture #31 \n        Mon 08/04\n      \n      \n        Equivalence of PDAs and CFGs (contd.) • Effective computability \n        [notes]\n      \n      \n        \n          Lecture 25 -[K]\n        \n      \n      \n      \n    \n    \n       Lecture #32 \n        Wed 10/04\n      \n      \n        Turing machines - motivation, definition, examples, configurations and acceptance condition \n        [notes]\n      \n      \n        \n          Lecture 28 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #33 \n        Fri 12/04\n      \n      \n        Recursive and recursively enumerable languages • Multi-tape TMs • Universal TM \n        [notes]\n      \n      \n        \n          Lectures 28-31 - [K]\n        \n      \n      \n        We covered parts of these lectures. Check the notes for the exact portions\n      \n    \n    \n       Lecture #34 \n        Mon 15/04\n      \n      \n        Recursive and recursively enumerable languages • Membership problem (MP) and Halting problem (HP) • Enumeration machines \n        [notes]\n      \n      \n        \n          Lectures 29-30 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Test #3\n        Tue 16/04\n      \n      \n        Based on Lectures 21 - 30 (Problem sets 5 and 6)\n      \n      \n      \n      \n      \n    \n    \n       Lecture #35 \n        Wed 17/04\n      \n      \n        Diagonalization - undecidability of the Halting Problem \n        [notes]\n      \n      \n        \n          Lecture 31 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #36 \n        Thu 18/04\n      \n      \n        Reducibility between problems - Halting Problem, Membership Problem and other examples \n        [notes]\n      \n      \n        \n          Lectures 31, 32 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #37 \n        Mon 22/04\n      \n      \n        Many-one reductions - examples \n        [notes]\n      \n      \n        \n          Lecture 33 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #38 \n        Tue 23/04\n      \n      \n        Many-one reductions - examples • Statement of Rice's theorem \n        [notes]\n      \n      \n        \n          Lectures 33, 34 - [K]\n        \n      \n      \n        PS7 released\n      \n    \n    \n       Lecture #39 \n        Wed 24/04\n      \n      \n        Rice's theorem - examples, proof \n        [notes]\n      \n      \n        \n          Lecture 34 - [K]\n        \n      \n      \n      \n    \n    \n       Lecture #40 \n        Thu 25/04\n      \n      \n        Problems on CFLs • Valid computation histories - proof ideas \n        [notes]\n      \n      \n        \n          Lecture 35 - [K]\n        \n      \n      \n      \n    \n    \n      \n        Tutorial #7\n        Fri 26/04\n      \n      \n        Based on Problem set 7\n      \n      \n      \n      \n      \n    \n    \n       Lecture #41 \n        Mon 29/04\n      \n      \n        Notion of time-complexity • Efficient computation and complexity class P \n      \n      \n      \n      \n      \n    \n    \n       Lecture #42 \n        Tue 30/04\n      \n      \n        P vs NP - efficient verifiability and search • Reductions, NP-completeness • Cook-Levin theorem (statement) • Wrap-up of the course \n      \n      \n      \n      \n      \n    \n    \n      \n        Test #4\n        Wed 01/05\n      \n      \n        Based on Lectures 31 - 40 (Problem set 7)\n      \n      \n      \n      \n      \n    \n  \n\n\nNo matching items"
  },
  {
    "objectID": "courses/6030/18/index.html",
    "href": "courses/6030/18/index.html",
    "title": "CS6030 Logic and Combinatorics for Computer Science",
    "section": "",
    "text": "Coordinates\n\nWhere: CS 34\nWhen: D slot; Mon(11-11.50am), Tue(10-10.50am), Wed(9-9.50am), Thu(12-12.50pm)\n\n\n\nTAs\n\nBarath Ashok (barath@cse, ACT Lab)\nAnkit Kumar Yadav (ankitky@cse, ACT Lab)\nTenkayya Gari Pradeep Reddy (cs16s010@smail, TCS Lab)\nPurnata Ghosal (purnatag@gmail, ACT Lab)\n\n\n\nObjectives\nThe aim is to help the student to gain the ability to use some of the fundamental methods of logic and combinatorics in Computer Science. The course is intended to provide the foundations of mathematical rigor, fundamental methods of logic and combinatorics in Computer Science.\n\n\nContents\nThe tentative outline of the topics that will be covered in the course is as follows. The order of the topics might vary.\n\nLogic - Propositional Logic, Predicate and First order Logic, Examples, Soundness and Completeness. Second Order Logic. Incompleteness theorems. Further extensions of logic(MSO, Temporal etc). Subsets of first order logic. Example Applications.\nProofs - Mathematical Arguments and Argument Forms, Inference Rules, Notion of a Proof and validity of an argument, Various Proof techniques and examples, Identifying fallacies.\nInfinite Sets - Countable and uncountable sets, Cantors diagonalization. Undecidability : Turing Machines, Church-Turing Thesis. Notion of Computation and decidability, Undecidability of the Halting Problem. Consequences to the Program Verification Problem.\nCounting and Combinatorics - Basics: Pigeonhole Principle and applications. Counting methods: Principle of Inclusion Exclusion, Proving Combinatorial Identities, Combinatorial Arguments, Permutations, Derangements. Recurrence: Linear recurrences, Generating Functions and Examples. Structured Sets - Posets and Lattices, Fixed Point Theorems (Knaster-Tarski and Polya), Monoids, Semigroups, Groupoids and Groups, Examples, Subgroups, Cosets, Lagranges theorem. Introduction to Polyas theory of counting.\n\n\n\nReferences\n\nDiscrete Mathematics and its Applications - Kenneth H. Rosen, 7th Edition, Tata McGraw Hill Publishers (Indian adaptation by Kamala Krithivasan).\nA Mathematical Introduction to Logic - Herbert B. Enderton, Elsevier, 2nd Edition.\nLogic in Computer Science: Modelling and Reasoning about Systems - Michael Huth and Mark Ryan, Cambridge University Press, 2nd Edition.\nCombinatorics: Topics, Techniques, Algorithms - Peter J. Cameron, Cambridge University Press, 1st Edition.\nConcrete Mathematics - Ronald Graham, Donald Knuth, and Oren Patashnik.\n\n\n\nGrading policy\n\nAssignments: 30%\nScribing and class participation: 10%\nCourse project: 10%\nMid-sem exam: 20%\nEnd-sem exam: 30%\n\n\n\nImportant dates\n\nTutorial quizzes (3-5): 20%\nQuiz 1(Sep 10, 2018): 20%\nQuiz 2(Oct 23, 2018): 20%\nFinal exam(Nov 19, 2018): 40%\n\n\n\nCourse Materials\n\nLectures"
  },
  {
    "objectID": "courses/5800/19/index.html",
    "href": "courses/5800/19/index.html",
    "title": "CS5800 Advanced Data Structures and Algorithms",
    "section": "",
    "text": "Coordinates\n\nWhere: CS 36\nWhen: C slot; Mon (10 - 10.50 am), Tue (9 - 9.50 am), Wed (8 - 8.50 am), Fri (12 - 12.50 pm)\n\n\n\nTAs\n\nAmit Kumar (cs16s032@smail)\nAmit Kumar Roy (cs18s022@smail)\nOm Prakash (cs16d017@smail)\nSagar Bisoyi (cs17s020@smail)\nSampriti Roy (cs18s007@smail)\nShahbaz Husain (cs18m049@smail)\n\n\n\nObjectives\nThe course is intended to provide the foundations of the practical implementation and usage of algorithms and data structures. One objective is to ensure that the student evolves into a competent programmer capable of designing and analyzing implementations of algorithms and data structures for different kinds of problems. The second objective is to expose the student to the algorithm analysis techniques, to the theory of reductions, and to the classification of problems into complexity classes like NP.\n\n\nContents\nThe course will introduce algorithm design techniques, methods to formally prove the correctness of algorithms, design of efficient data structures and techniques to analyse the running time of the algorithms. The skeleton of the topics covered in the course will be as follows. The order of the topics covered may vary.\n\nBasics of algorithm design, techniques for analyzing worst-case time complexity of algorithms.\nDivide-and-Conquer design technique.\nDesign and analysis of greedy algorithms.\nAmortized analysis of algorithms.\nDynamic programming.\nCuts and flows.\nComputational intractability - Why do some problems not have efficient algorithms?\nCoping with computational intractability.\n\n\n\nReferences\n\n[CLRS]: Introduction to Algorithms - Cormen, Leiserson, Rivest and Stein, 3rd Edition.\n[DPV]: Algorithms - Dasgupta, Papadimitrou, and Vazirani, 1st Edition.\n[E]: Algorithms - Jeff Erickson\n[KT]: Algorithm Design - Kleinberg and Tardos, 1st Edition.\n\n\n\nGrading policy\n\nShort-exams(Best 2/3): 20%\nQuizzes: 2*20 = 40%\nEnd-sem: 40%\n\n\n\nImportant dates\n\nTutorials: Aug 9, Aug 30, Sep 20, Oct 11, Nov 1\nShort exams: Aug 23, Sep 27, Nov 8\nQuizzes: Sep 7, Oct 19\nEnd-sem: Nov 19\n\n\n\nCourse Materials\n\nMoodle\nLectures and references\nProblem sets: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"
  },
  {
    "objectID": "courses/6840/21/lectures.html",
    "href": "courses/6840/21/lectures.html",
    "title": "CS6840 Modern Complexity Theory",
    "section": "",
    "text": "The lecture videos and the notes written during the lectures are available below.\n\nLectures\nScribbles\n\n\nWeek 1\n\nAdministrative details about the course; Recap from last semester - probabilistic complexity classes; Complexity of counting - the classes PP and #P; Notion of #P-completeness and parsimonious reductions; Perfect matchings, cycle covers and permanent of matrices.\n\n\n\nVideos: Feb 1, Feb 3, Feb 4\nReferences: [AB] - Chapters 7,17; [DK] - Chapters 8,9\nScribbles: Feb 1, Feb 3, Feb 4\n\n\n\nWeek 2\n\nValiant’s theorem - counting perfect matchings in bipartite graphs is #P-complete. Toda’s theorem - BP and parity operators and their properties; Isolation lemma and its proof.\n\n\n\nVideos: Feb 8, Feb 10, Feb 11\nReferences: [AB] - Chapters 7, 17; [DK] - Chapters 8, 9\nScribbles: Feb 8, Feb 10, Feb 11\n\n\n\nWeek 3\n\nToda’s theorem - Randomized reduction from NP to \\(\\oplus\\) P; relativizing the reduction to PH; Derandomizing the reduction - Modulus amplifying polynomials; Boolean circuits and lower bounds; Shannon’s lower bound and Lupanov’s upper bound.\n\n\n\nVideos: Feb 15, Feb 17, Feb 18\nReferences: [AB] - Chapters 7, 17; [DK] - Chapters 8, 9\nScribbles: Feb 15, Feb 17, Feb 18\n\n\n\nWeek 4\n\nUniform circuit families; P-uniform P/poly is P; NC and AC hierarchy; Examples of functions in NC and AC; P vs NC question and P-completeness; Lower bounds: Restrictions and Gate elimination - Schnorr’s lower bound; Random restrictions and shrinkage - Subbotovskaya’s lower bound; Lower bounds for parity - decision trees and the switching lemma.\n\n\n\nVideos: Feb 22, Feb 24, Feb 25\nReferences: [AB] - Chapters 6; Rossman’s notes; Kopparty’s notes\nScribbles: Feb 22, Feb 24, Feb 25\n\n\n\nWeek 5\n\nLower bounds for parity - decision trees and the switching lemma; Proof of the switching lemma.\n\n\n\nVideos: Mar 1, Mar 4\nReferences: Rossman’s notes; Kopparty’s notes; Switching Lemma Primer\nScribbles: Mar 1, Mar 4\n\n\n\nWeek 6\n\nMajority in \\(NC^1\\); Parity constant-depth reduces to Majority; Lower bound for \\(AC^0(\\oplus)\\) - Razborov-Smolensky technique.\n\n\n\nVideos: Mar 8, Mar 10, Mar 11\nReferences: Rossman’s notes here and here; Kopparty’s notes; Smolensky’s paper and Filmus’ exposition\nScribbles: Mar 8, Mar 10, Mar 11\n\n\n\nWeek 7\n\nLower bound for \\(AC^0(MOD_{p^k})\\) - Razborov-Smolensky technique; Hardness vs Randomness - Definition of PRGs; Derandomization using PRGs; PRGs and unpredictability.\n\n\n\nVideos: (will be updated)\nReferences: Smolensky’s paper and Filmus’ exposition; [AB] - Chapter 20\nScribbles: Mar 15 (will be uploaded soon), Mar 17 and 18\n\n\n\nWeek 8\n\nPRGs and unpredictability; Hardness vs Randomness - the Nisan-Wigderson generator; Hardness amplification: Yao’s XOR lemma - from mild to strong hardness; Impagliazzo’s hardcore lemma; Brief outline of locally decodable codes - from worst-case hardness to mildly average-case hardness.\n\n\n\nVideos: (will be updated)\nReferences: [AB] - Chapters 19 and 20\nScribbles: (will be uploaded soon)\n\n\n\nWeek 9\n\nMid-semester break\n\n\n\n\nWeek 10\n\nInteractive proofs - private coins and public coins; Arthur-Merlin games; Interactive proof for graph non-isomorphism; Set lower bound protocol - AM protocol for graph non-isomorphism; properties of the classes AM and MA.\n\n\n\nVideos: (will be updated)\nReference: [AB] - Chapters 8; Lecture notes - Katz here and here; Kabanets here\nScribbles: (will be uploaded soon)\n\n\n\nWeek 11\n\nSimulating the optimal prover in PSPACE; Permanent in IP: LFKN protocol; IP = PSPACE: Using self-reducibility, arithmetization and linearization.\n\n\n\nVideos: (link sent on the course mailing list)\nReferences: [AB] - Chapter 8, Babai’s exposition\nScribbles: (will be uploaded soon)\n\n\n\nWeek 12\n\nIP=PSPACE: final protocol; Proof verification view of interactive proofs; MIP = PCP(\\(n^c, n^c\\)); Statement of the PCP theorem; PCP theorem and inapproximability.\n\n\n\nReferences: [AB] - Chapters 8, 11\n\n\n\nWeek 13\n\nExample of a PCP for NP - NP \\(\\subseteq\\) PCP\\((n^c, O(1))\\); Derandomization implies circuit lower bounds - Kabanets-Impagliazzo theorem; IKW theorem - hard witnesses and derandomization; From SAT algorithms to circuit lower bounds - statement of Williams’ theorem.\n\n\n\nReferences: [AB] - Chapters 11, 22; Gil Cohen’s lecture notes\nAdditional reading:\n\nLimits of Approximation Algorithms - PCPs and Unique Games: Lecture notes\nImproving Exhaustive Search Implies Superpolynomial Lower Bounds - Ryan Williams\n\n\n\n\nWeek 14\n\nFrom SAT algorithms to circuit lower bounds - statement and proof of Williams’ theorem; Succinct certificates and verification; Wrap-up of the course.\n\n\n\nReferences: Gil Cohen’s lecture notes\nAdditional reading:\n\nImproving Exhaustive Search Implies Superpolynomial Lower Bounds - Ryan Williams\nNon-Uniform ACC Circuit Lower Bounds - Ryan Williams"
  },
  {
    "objectID": "courses/6025/22/lectures.html",
    "href": "courses/6025/22/lectures.html",
    "title": "CS6025 Sublinear Algorithms",
    "section": "",
    "text": "The lecture videos and notes written during the lectures are available in the links below.\n\nLectures (till Jan 27)\nScribbles\n\n\nWeek 1, Jan 17-21\n\nOutline of the course; logistics; reservoir sampling; parameter estimation; basic probability and concentration bounds; Probabilistic counting - Morris counter.\n\n\n\nReferences:\n\nProbability and Computing - Mitzenmacher and Upfal (Chapters 1-4 for brushing up basic discrete probability)\nJelani Nelson’s notes\nNotes from a previous offering of this course (incomplete and unedited)\n\nAdditional reading: Optimal bounds for approximate counting - Nelson and Yu\n\n\n\nWeek 2, Jan 24-28\n\nFrequency moments - counting distinct elements; Flajolet-Martin algorithm; BJKST’s algorithm and analysis; Pairwise-independent hash families.\n\n\n\nReferences:\n\nJelani Nelson’s notes\nNotes from a previous offering of this course (incomplete and unedited)\n\nAdditional reading:\n\nHyperLogLog - the analysis of a near-optimal cardinality estimation algorithm - Flajolet, Fusy, Gandouet, Meunier\nWikipedia entry for HyperLogLog\nCounting distinct elements in a data stream - Bar-Yossef, Jayram, Kumar, Sivakumar, Trevisan.\n\n\n\n\nWeek 3, Jan 31-Feb 4\n\nCounting distinct elements in turstile streams; Linear sketching; Nisan’s PRG; Frequency moments - AMS algorithm and sketch for \\(F_2\\).\n\n\n\nVideos: Jan 31, Feb 2, Feb 3\nReferences:\n\nJelani Nelson’s notes\nNotes from a previous offering of this course (incomplete and unedited)\n\nAdditional reading:\n\nThe Space Complexity of Approximating the Frequency Moments - Alon, Matias, Szegedy.\nStable Distributions, Pseudorandom Generators, Embeddings, and Data Stream Computation - Indyk.\n\n\n\n\nWeek 4, Feb 7-11\n\nHeavy-hitters problem - CountMin sketch and Count sketch; \\(\\ell_0\\)-sampling and sparse recovery.\n\n\n\nVideos: Feb 7, Feb 9, Feb 10\nReferences:\n\nJelani Nelson’s notes\nNotes from a previous offering of this course (incomplete and unedited)\n\nAdditional reading:\n\nAn Improved Data Stream Summary: The Count-Min Sketch and its Applications - Cormode, Muthukrishnan.\nFinding Frequent Items in Data Streams - Charikar, Chen, Farch-Colton.\n\n\n\n\nWeek 5, Feb 14-18\n\n\\(\\ell_0\\)-sampling and sparse recovery (contd.), Graph streams - connectivity, spanners, sparsifiers, triangle counting.\n\n\n\nVideos: Feb 14, Feb 16, Feb 17\nReferences:\n\nJelani Nelson’s notes\nNotes from a previous offering of this course (incomplete and unedited)\nGraph Stream Algorithms: A Survey - McGregor\n\n\n\n\nWeek 6, Feb 21-25\n\nGraph streams - random walks; Graph sketches - connectivity in fully dynamic streams; Lower bounds for streaming algorithms - intro to communication complexity.\n\n\n\nVideos: Feb 21, Feb 23, Feb 24\nReferences:\n\nNotes from a previous offering of this course (incomplete and unedited)\nGraph Stream Algorithms: A Survey - McGregor\n[RY]\n\nAdditional reading:\n\nEstimating PageRank on Graph Streams - Das Sarma, Gollapudi, Panigrahy.\n\n\n\n\nWeek 7, Feb 28-Mar 4\n\nLower bounds for streaming algorithms using communication complexity.\n\n\n\nVideos: Feb 28, Mar 2, Mar 3\nReferences:\n\nNotes from a previous offering of this course (incomplete and unedited)\n[RY]\n\n\n\n\nWeek 8, Mar 7-11\n\nIntroduction to property testing; Testing linearity - the BLR test; Fourier analysis of Boolean functions.\n\n\n\nVideos: Mar 7, Mar 9\nReferences:\n\nChapter 1 - Analysis of Boolean Functions by O’Donnell\n\n\n\n\nWeek 9, Mar 14-18\n\nPAC learning and Fourier concentration - decision trees; Dictatorship testing.\n\n\n\nReferences:\n\nChapters 2, 3, 7 - Analysis of Boolean Functions by O’Donnell\n\n\n\n\nWeek 10, Mar 21-25\n\nTesting monotonicity of Boolean functions; Lower bounds for monotonicity testing; Graph property testing in the dense model - biclique and bipartiteness.\n\n\n\nReferences:\n\nServedio’s lecture notes\nChapter 8 - Introduction to Property Testing by Goldreich\n\n\n\n\nWeek 11, Mar 28-Apr 1\n\nCanonical testers for graph properties; Triangle-freeness testing; Szemeredi regularity lemma and characterization of constant-query testable properties; Testing properties of sparse graphs\n\n\n\nReferences\n\nChapter 8,9 - Introduction to Property Testing by Goldreich\nChapter 17 - The Probabilistic Method by Alon, Spencer\nLecture notes on Regularity lemma and graph removal lemmas by Zhao\nThree Theorems Regarding Testing Graph Properties by Goldreich, Trevisan\n\n\n\n\nWeek 12, Apr 4-8\n\nConnectivity testing; estimating the number of connected components; Cycle-freeness - one-sided and two-sided testers; One-sided tester for bipartiteness; Lower bound for bipartiteness testing\n\n\n\nReferences\n\nChapter 9 - Introduction to Property Testing by Goldreich\nProperty Testing in Bounded Degree Graphs - Goldreich and Ron\nAssadi’s lecture notes\n\nAdditional reading:\n\nA Sublinear Bipartiteness Tester for Bounded Degree Graphs - Goldreich and Ron\n\n\n\n\nWeek 13, Apr 11-15\n\nPartition oracles and applications - testing minor-closed properties\n\n\n\nReferences\n\nChapter 9 - Introduction to Property Testing by Goldreich\nLocal Graph Partitions for Approximation and Testing - Hassidim, Kelner, Nguyen and Onak"
  },
  {
    "objectID": "courses/6170/22/index.html",
    "href": "courses/6170/22/index.html",
    "title": "CS6170 Randomized Algorithms",
    "section": "",
    "text": "Coordinates\n\nWhere: CS24 CS34\nWhen: G slot - Mon (12-12.50), Wed (17-17.50), Thu (10-10.50), Fri (9-9.50)\n\n\n\nTAs\nSampriti (cs18d200@smail) and Keshav (cs21s040@smail)\n\n\nObjectives\nRandomization and probabilistic methods are ubiquitous in Computer Science. Randomization often provides simple, elegant algorithms that perform well in practice. Furthermore, there are problems for which we do not know any efficient algorithm that does not use randomness. This course will introduce methods to design and analyze randomized algorithms in a variety of settings.\n\n\nContents\nWe will study the application of randomization and probabilistic methods in a variety of settings. The following is a brief outline of the contents of the course. The emphasis on the various topics, and their order will be determined later. - Basic probabilistic techniques - random variables, expectation, variance, tail bounds with applications. - Balls and bins, balanced allocations and applications - Online algorithms - Markov chains, random walks and applications - Sampling and estimation - Monte Carlo methods - VC dimension and PAC learning, algebraic techniques (if time permits)\n\n\nReferences\n\n[MU]: Probability and Computing - Mitzenmacher and Upfal.\n[MR]: Randomized Algorithms - Motwani and Raghavan.\n[DP]: Concentration of Measure for the analysis of Randomized Algorithms - Dubhashi and Panconesi.\n\nThere are lots of lecture notes and resources available online that we will refer to occasionally.\n\n\nGrading policy (tentative)\n\nProblem sets: 40% (best 4/5)\nScribing: 5%\nMid-sem: 25%\nEnd-sem: 30%\n\n\n\nImportant dates (tentative)\n\nProblem sets: Aug 12, Sep 2, Sep 16, Oct 7, Oct 21 (the deadline will be around 10 days after the problem sets are released)\nMid-sem: Sep 14\nEnd-sem: Nov 10\n\n\n\nCourse Materials\n\nMoodle (self-enrolment is enabled)\nLecture schedule\nDiscussion forum\nProblem sets: 1, 2, 3, 4, 5"
  },
  {
    "objectID": "courses/6170/21/index.html",
    "href": "courses/6170/21/index.html",
    "title": "CS6170 Randomized Algorithms",
    "section": "",
    "text": "Coordinates\n\nWhere: Online\nWhen: J slot - Mon (16.50-17.40), Wed (14-15.15), Thu (15.25-16.40)\n\n\n\nTA\nSampriti Roy (cs18d200@smail)\n\n\nObjectives\nRandomization and probabilistic methods are ubiquitous in Computer Science. Randomization often provides simple, elegant algorithms that perform well in practice. Furthermore, there are problems for which we do not know any efficient algorithm that does not use randomness. This course will introduce methods to design and analyze randomized algorithms in a variety of settings.\n\n\nContents\nWe will study the application of randomization and probabilistic methods in a variety of settings. The following is a brief outline of the contents of the course. The emphasis on the various topics, and their order will be determined later. - Basic probabilistic techniques - random variables, expectation, variance, tail bounds with applications. - Markov chains, random walks and applications - Sampling and estimation - Monte Carlo methods - Balls and bins, balanced allocations and applications - VC dimension and PAC learning, online algorithms, algebraic techniques (if time permits)\n\n\nReferences\n\n[MU]: Probability and Computing - Mitzenmacher and Upfal.\n[MR]: Randomized Algorithms - Motwani and Raghavan.\n[DP]: Concentration of Measure for the analysis of Randomized Algorithms - Dubhashi and Panconesi.\n\nThere are lots of lecture notes and resources available online that we will refer to occasionally.\n\n\nGrading policy (tentative)\n\nProblem sets: 40% (best 4/5)\nScribing: 5%\nCourse reading: 20% (in groups of at most 3)\nMid-sem: 15%\nEnd-sem + viva: 20%\n\n\n\nImportant dates (tentative)\n\nProblem sets: Aug 13, Sep 10, Sep 24, Oct 15, Oct 29 (deadlines will be about 10 days after the dates given)\nMid-sem: Sep 23\nEnd-sem: Nov 18\n\n\n\nCourse Materials\n\nMoodle\nLecture schedule (with links to the videos and notes)\nCourse reading\nProblem sets: 1, 2, 3"
  },
  {
    "objectID": "courses/6845/18/index.html",
    "href": "courses/6845/18/index.html",
    "title": "CS6845 Pseudorandomness",
    "section": "",
    "text": "Details\n\nWhere: CS26\nWhen: A slot; Mon(8-8.50am), Tue(12-12.50pm), Thu(11-11.50am), Fri(10-10.50am)\nTA: Krishnamoorthy Dinesh (ACT Lab, kdinesh@cse)\n\n\n\nObjectives\nThe objective of this course is to understand the concept of pseudorandomness and its use in derandomizing algorithms. Various examples of pseudorandom objects like expander graphs, error-correcting codes as well as their application in different areas of theoretical computer science will be studied. The study of pseudorandomness has provided a rich toolkit of techniques that have wide applications in theoretical computer science. This course aims to provide an introduction these techniques as well.\n\n\nContents\n\nBasic probabilistic method - Introduction to the probabilistic method, first moment and second moment methods, Markov’s and Chebyshev’s inequality with applications, concentration of measure, Chernoff bounds, applications to error reduction, Lovasz local lemma and applications.\nBasic derandomization techniques - Method of conditional probabilities and pessimistic estimators, Pairwise independent hash families, and introduction to expanders.\nExpander graphs and applications - Vertex expansion, edge expansion and spectral expansion - relationship between the various notions of expansion, expander mixing lemma, analysis of random walks on expanders, examples of explicit families of expander graphs and constructions, Zig-zag product of graphs and explicit constructions of expanders, application of the zig-zag product for derandomization - undirected reachability in Logspace. Lossless expanders, extractors and their constructions.\nError-correcting codes - Shannon’s channel coding theorems and proofs, notion of distance and rate of a code, linear codes, dual codes, Singleton bound. Reed-Solomon codes, unique decoding, list decoding and applications. Locally decodable codes and applications. Local list decoding, Goldreich-Levin theorem and applications.\nFourier analytic methods - Introduction to Fourier analysis and Fourier analytic proof of Goldreich-levin theorem, small-bias spaces - constructions, analysis and applications in derandomization.\n\n\n\nReferences\nWe will cover the course material from a variety of sources. The references for each lecture will be mentioned in class. The following are some of the reference material that we will use. During the course additional material may get added.\n\nPseudorandomness - a book by Salil Vadhan.\nExpander graphs and their applications - a survey by Shlomo Hoory, Nathan Linial and Avi Wigderson.\nAlgorithmic introduction to coding theory - Lecture notes by Madhu Sudan\nEssential coding theory - a book by Venkatesan Guruswami, Atri Rudra and Madhu Sudan.\nSome applications of coding theory in computational complexity - a survey by Luca Trevisan.\nAnalysis of Boolean functions - a book by Ryan O’Donnell.\n\n\n\nGrading policy\n\nAssignments: 20%\nCourse project: 15%\nQuiz 1(Feb 19, 2018): 15%\nQuiz 2(Apr 2, 2018): 15%\nFinal exam(May 1, 2018): 35%\n\n\n\nCourse Materials\n\nLectures"
  },
  {
    "objectID": "people.html",
    "href": "people.html",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "PhD\n\n\n\n\n\n\nSampriti Roy (2018 - )\n\n\n\n\n\nSampriti is working on problems related to the property testing of probability distributions.\n\n\n\nMS\n\n\n\n\n\n\nKeshav Tiwari (2021 - )\n\n\n\n\n\nKeshav is working on coloring problems in the LCA and related models.\n\n\n\nDD\n\n\n\n\n\n\nT Prashanth (2021-22)\n\n\n\n\n\nPrashanth worked on property testing of graph problems in the streaming model.\n\n\n\n\n\n\n\n\n\nB Abhijit (2022-23)\n\n\n\n\n\nAbhijit worked on algorithms for simulating random walks in the streaming model.\n\n\n\nBTech\n\n\n\n\n\n\nChahel Singh (2023-24)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDhruv Aggarwal (2023-24)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK Dhanush (2023-24)\n\n\n\n\n\nDhanush is working on algorithms for finding/learning hypergraphs and hyperedges with queries.\n\n\n\n\n\n\n\n\n\nD Hakesh (2022-23)\n\n\n\n\n\nHakesh worked on understanding the average sensitivity of online graph algorithms.\n\n\n\n\n\n\n\n\n\nVineet Dhandharia (2022-23)\n\n\n\n\n\nVineet worked on algorithms for finding an edge in a hidden graph under various query models."
  },
  {
    "objectID": "people.html#people",
    "href": "people.html#people",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "PhD\n\n\n\n\n\n\nSampriti Roy (2018 - )\n\n\n\n\n\nSampriti is working on problems related to the property testing of probability distributions.\n\n\n\nMS\n\n\n\n\n\n\nKeshav Tiwari (2021 - )\n\n\n\n\n\nKeshav is working on coloring problems in the LCA and related models.\n\n\n\nDD\n\n\n\n\n\n\nT Prashanth (2021-22)\n\n\n\n\n\nPrashanth worked on property testing of graph problems in the streaming model.\n\n\n\n\n\n\n\n\n\nB Abhijit (2022-23)\n\n\n\n\n\nAbhijit worked on algorithms for simulating random walks in the streaming model.\n\n\n\nBTech\n\n\n\n\n\n\nChahel Singh (2023-24)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDhruv Aggarwal (2023-24)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK Dhanush (2023-24)\n\n\n\n\n\nDhanush is working on algorithms for finding/learning hypergraphs and hyperedges with queries.\n\n\n\n\n\n\n\n\n\nD Hakesh (2022-23)\n\n\n\n\n\nHakesh worked on understanding the average sensitivity of online graph algorithms.\n\n\n\n\n\n\n\n\n\nVineet Dhandharia (2022-23)\n\n\n\n\n\nVineet worked on algorithms for finding an edge in a hidden graph under various query models."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "I am a faculty member in the Department of Computer Science and Engineering at IIT Madras. I work in the areas of sublinear algorithms, and computational complexity theory.\nPrior to joining IIT Madras, I was a postdoctoral fellow at TU Dortmund, working with Prof. Christian Sohler. Before that I was a postdoctoral fellow at the Technion, working with Prof. Eldar Fischer. I completed my PhD at Matscience, Chennai where Prof V. Arvind was my advisor."
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "Current/Upcoming courses\n\nCS2200 Languages, Machines, and Computation - Jan-May 24\nCS5800 Advanced Data Structures and Algorithms - July-Nov 24\n\n\n\n\nAll courses\n\n\n\n\n\n\n\nCS1100 Introduction to Programming\nMay-July 22\n\n\nCS2200 Languages, Machines and Computation\nJan-May 20, Jan-May 24\n\n\nCS2800 Design and Analysis of Algorithms\nJan-May 23\n\n\nCS5800 Advanced Data Structures and Algorithms\nJul-Nov 19, Jul-Nov 24\n\n\nCS6014 Computability and Complexity\nSep-Dec 20\n\n\nCS6025 Sublinear Algorithms\nJan-May 19, Jan-May 22\n\n\nCS6030 Logic and Combinatorics for Computer Science\nJul-Nov 18\n\n\nCS6150 Advanced Programming\nJul-Nov 22\n\n\nCS6170 Randomized Algorithms\nJul-Nov 21, Jul-Nov 22, Jul-Nov 23\n\n\nCS6840 Modern Complexity Theory\nFeb-May 21\n\n\nCS6845 Pseudorandomness\nJan-May 18"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "Publications\n(Pre-prints are available from my DBLP page. If you can’t find a copy, feel free to email me.)\n\nTesting properties of distributions in the streaming model\n(with Sampriti Roy)\nISAAC 2023\nByzantine Connectivity Testing in the Congested Clique\n(with John Augustine, Anisur Rahaman Molla, and Gopal Pandurangan)\nDISC 2022\nDynamic Complexity of Expansion\n(with Samir Datta and Anuj Tawari)\nCSR 2021\nImproving and Extending the Testing of Distributions for Shape-restricted Properties\n(with Eldar Fischer and Oded Lachish)\nAlgorithmica, 2019\nPreliminary version in STACS 2017\nFast Distributed Algorithms for Testing Graph Properties\n(with Keren Censor-Hillel, Eldar Fischer and Gregory Schwartzman)\nDistributed Computing, 2019\nPreliminary version in DISC 2016\nA Sublinear Tester for Outerplanarity (and other Forbidden Minors) with One-Sided Error\n(with Hendrik Fichtenberger, Reut Levi and Maximilian Woetzel)\nICALP 2018\nA Two-Sided Error Distributed Property Tester for Conductance\n(with Hendrik Fichtenberger)\nMFCS 2018\nExpanding Generating Sets for Solvable Permutation Groups\n(with V. Arvind, Partha Mukhopadhyay and Prajakta Nimbhorkar)\nSIAM Journal of Discrete Mathematics, 2018\nPreliminary version in MFCS 2012\nOn the Isomorphism of Decision Trees and Decision Lists\n(with V. Arvind, Johannes Koebler, Sebastian Kuhnert, Gaurav Rattan)\nTheoretical Computer Science, 2015\nPreliminary version in FCT 2013\nTrading Query Complexity for Sample-based Testing and Multi-testing Scalability\n(with Eldar Fischer and Oded Lachish)\nFOCS 2015\nIsomorphism Testing of Boolean Functions Computable by Constant-Depth Circuits\n(with V. Arvind)\nInformation and Computation, 2015\nPreliminary version in LATA 2012\nApproximate Graph Isomorphism\n(with V. Arvind, Johannes Koebler and Sebastian Kuhnert)\nMFCS 2012"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Yadu Vasudev",
    "section": "",
    "text": "Contact\nSSB 207\nDept of Computer Science and Engineering\nIIT Madras\nPhone: +91-2257-4386\nEmail: yadu@cse.iitm.ac.in"
  },
  {
    "objectID": "courses/6170/21/lectures.html",
    "href": "courses/6170/21/lectures.html",
    "title": "CS6170 Randomized Algorithms",
    "section": "",
    "text": "The lecture videos and notes written during the lectures are available in the links below.\n\nLectures\nScribbles and Notes (from Aug 9), from Sep 29\n\n\n\nLecture 27, Oct 14\n\nFPRAS for #SAT (contd.); Connection between sampling and counting: FPAUS implies FPRAS.\n\n\n\nReferences: [MU] - Chapter 11\n\n\nLecture 26, Oct 13\n\nFPRAS for #DNF; FPRAS for #SAT with black-box access to SAT.\n\n\n\nReferences: [MU] - Chapter 11\n\n\nLecture 25, Oct 11\n\nMonte-Carlo method; FPRAS for #DNF; Importance sampling.\n\n\n\nReferences: [MU] - Chapter 11\n\n\nLecture 24, Oct 7\n\nRandom walks on expander; Probability amplification using expander random walks; Counting problems.\n\n\n\nReferences: Pseudorandomness by Vadhan - Sections 4.1, 4.2\n\n\nLecture 23, Oct 6\n\nRandom walks on undirected graphs - s-t connectivity; convergence of random walks - connections with spectrum of a graph.\n\n\n\nReferences: [MU] - Chapter 7, Pseudorandomness by Vadhan - Section 2.4\n\n\nLecture 22, Oct 4\n\nMarkov chains - more definitions, properties, stationary distributions; Random walks on undirected graphs.\n\n\n\nReferences: [MU] - Chapter 7\n\n\nLecture 21, Sep 30\n\nRandomized 3-SAT - extending the idea of the 2-SAT algorithm, Modifications and a better analysis - Schoening’s algorithm.\n\n\n\nReferences: [MU] - Chapter 7\n\n\nLecture 20, Sep 29\n\nRandomized 2-SAT, Markov chains - definition and basics, Randomized 3-SAT.\n\n\n\nReferences: [MU] - Chapter 7\n\n\nLecture 19, Sep 27\n\nRandom-walk based algorithm for 2-SAT.\n\n\n\nReferences: [MU] - Chapter 7\n\n\nTutorial, Sep 22\n\nDiscussion of Pset 2\n\nLecture 18, Sep 20\n\nCuckoo hashing - analysis (contd.) and bounds.\n\n\n\nReferences: [MU] - Chapter 17\nAdditional reading - Cuckoo Hashing - Pagh and Rodler.\n\n\nLecture 17, Sep 16\n\nCuckoo hashing - bounds and analysis using random graphs.\n\n\n\nReferences: [MU] - Chapter 17\n\n\nLecture 16, Sep 13\n\nFKS hashing - construction and bounds; Hashing with open addressing - linear probing.\n\n\n\nReferences: [MU] - Chapter 15, [MR] - Chapter 8.5\nAdditional reading: Knuth’s note on the analysis of linear probing\n\n\nLecture 15, Sep 9\n\nUniversal hash families - constructions, applications, bounds; Perfect hash families.\n\n\n\nReferences: [MU] - Chapter 15\n\n\nLecture 14, Sep 8\n\nBloom filters - false positives; Negatively associated random variables and their properties - concentration bounds and application to analyzing the Bloom filter.\n\n\n\nReferences: [MU] - Chapter 5; [DP] - Chapter 3.1\n\n\nLecture 13, Sep 6\n\nPoisson approximation - Coupon collector problem.\n\n\n\nReferences: [MU] - Chapter 5\n\n\nLecture 12, Sep 2\n\nBalls and bins - Poisson approximation; lower bound on the maximum load.\n\n\n\nReferences: [MU] - Chapter 5\n\n\nLecture 11, Sep 1\n\nBalls and bins - birthday paradox, maximum load, Poisson approximation.\n\n\n\nReferences: [MU] - Chapter 5\nAdditional reading: Tight bounds for balls and bins for different values of \\(m\\) and \\(n\\)\n\n\nTutorial, Aug 30\n\nDiscussion of Pset 1\n\nLecture 10, Aug 26\n\nProbability amplification of one-sided error algorithms; Chernoff-Hoeffding bounds - outline of the proof and applications.\n\n\n\nReferences: [MU] - Chapter 4, [DP] - Chapters 1, 2\n\n\nLecture 9, Aug 25\n\nChebyshev’s inequality - probability amplification of one-sided error algorithms; pairwise independent hash families.\n\n\n\nReferences: Salil Vadhan’s notes - Section 3.5, [MU] - Chapter 3\n\n\nLecture 8, Aug 19\n\nAnalysis of the Coupon-collector problem; Markov’s inequality - analyis of randomized Quicksort.\n\n\n\nReferences: [MU] - Chapters 2, 3\n\n\nLecture 7, Aug 16\n\nRandom variables - Bernoulli, Binomial, Geometric; Probability Mass functions; Coupon-collector problem.\n\n\n\nReferences: [MU] - Chapter 2\n\n\nLecture 6, Aug 12\n\nRandomized Maxcut - pairwise independent random bits and derandomization; Randomized Quicksort and its analysis.\n\n\n\nReferences: [MU] - Chapter 2\n\n\nLecture 5, Aug 11\n\nRandomized Maxcut - analysis of the algorithm, properties of the random variables.\n\n\n\nReferences: [MU] - Chapter 2\n\n\nLecture 4, Aug 9\n\nMincut - Karger’s algorithm and analysis.\n\n\n\nReferences: [MU] - Chapter 1\n\n\nLecture 3, Aug 5\n\nProof of DeMillo-Lipton-Schwartz-Zippel lemma - recall of basic probability definitions and concepts; Verifying matrix multiplication - Frievald’s algorithm.\n\n\n\nReferences: [MU] - Chapter 1\n\n\nLecture 2, Aug 4\n\nPolynomial Identity Testing - connections to perfect matching in graphs; statement of the DeMillo-Lipton-Schwartz-Zippel lemma.\n\n\n\nReferences: [MU] - Chapter 1\n\n\nLecture 1, Aug 2\n\nIntroduction to the course; Toy example - verifying polynomial factorization; extending the idea to multivariate polynomials - Polynomial identity testing.\n\n\n\nReferences: [MU] - Chapter 1"
  },
  {
    "objectID": "courses/6170/21/reading.html",
    "href": "courses/6170/21/reading.html",
    "title": "CS6170 Randomized Algorithms",
    "section": "",
    "text": "Topics/References for course reading\nBelow are a list of topics and related references. You can form groups of size at most 3 to read the material, and give a lecture in class during the normal lecture slot. We will schedule these towards the end of the semester. If you want to read some other topic of your choice, please talk to me about it.\n\nRandomized rounding\n\nRandomized Rounding: A Technique for Provably Good Algorithms and Algorithmic Proofs - Raghavan and Thompson.\nApproximation Algorithms via Randomized Rounding: A Survey - Srinivasan.\n\n\n\nPessimistic estimators and derandomization\n\nProbabilistic Construction of Deterministic Algorithms - Approximating Packing Integer Programs - Raghavan.\nDerandomizing the Ahlswede-Winter Matrix-valued Chernoff bound using pessimistic estimators, and applications - Wigderson and Xiao.\n\n\n\nHashing\n\nThe Power of Simple Tabulation Hashing - Patrascu and Thorup.\nWhy Simple Hash Functions Work: Exploiting the Entropy in a Data Stream - Mitzenmacher and Vadhan.\n\n\n\nRandom walks and clustering\n\nA Local Clustering Algorithm for Massive Graphs and its Application to Nearly-Linear Time Graph Partitioning - Spielman and Teng.\n\nThis is the first of three papers (the others are here and here), that give a nearly linear-time algorithm for solving certain systems of linear equations. We will stick to just this paper.\n\n\nAlgebraic techniques\n\nProbabilistic Polynomials and Hamming Nearest Neighbors - Alman and Williams.\nAn Illuminating Algorithm for the Light Bulb Problem - Alman.\n\n\n\nDimension reduction and applications\n\nDatabase-friendly random projections: Johnson-Lindenstrauss with binary coins - Achlioptas.\nApproximate Nearest Neighbor: Towards Removing the Curse of Dimensionality - Har-Peled, Indyk and Motwani.\n\n\n\nMatching in graphs\n\nPerfect Matchings via Uniform Sampling in Regular Bipartite Graphs - Goel, Kapralov and Khanna.\nPerfect Matchings in \\(O(n \\log n)\\) Time in Regular Bipartite Graphs - Goel, Kapralov and Khanna.\n\n\n\nColor-coding and subset sum\n\nColor-Coding - Alon, Yuster and Zwick.\nA Near-Linear Pseudopolynomial Time Algorithm for Subset Sum - Bringmann.\n\n\n\nDynamic algorithms\n\nMaintaining a Large Matching and a Small Vertex Cover - Onak and Rubinfeld.\nFully dynamic maximal matching in \\(O(\\log n)\\) update time - Baswana, Gupta and Sen.\n\n\n\nOnline algorithms\n\nOnline Budgeted Matching in Random Input Models with applications to Adwords - Goel and Mehta.\nOnline Stochastic Matching: Beating \\(1 − \\tfrac{1}{e}\\) - Feldman, Mehta, Mirrokni and Muthukrishnan."
  },
  {
    "objectID": "courses/6025/19/index.html",
    "href": "courses/6025/19/index.html",
    "title": "CS6025 Sublinear Algorithms",
    "section": "",
    "text": "Coordinates\n\nWhere: CS 34\nWhen: F slot; Tue(4.50-5.40pm), Wed(11-11.50am), Thur(9-9.50am), Fri(8-8.50am)\n\n\n\nObjectives\nThe aim of the course is to understand algorithmic techniques to handle large amounts of data that cannot be stored and accessed as a whole. To process such large amounts of data, classical algorithms, even those that are linear-time, are inefficient. Through this course, we will look at techniques to design and analyze algorithms of sublinear time and space complexity. The main focus of the course would streaming, sketching, sampling and property testing algorithms. To complement this, we will also study techniques developed to prove lower bounds against such algorithms.\n\n\nContents\nThe tentative outline of the topics that will be covered in the course is as follows. The order of the topics might vary.\n\nPreliminaries - Tail-bounds (Markov, Chebyshev, Chernoff), Basic linear algebra, motivation and introduction to ideas of streaming, sketching and property testing with simple examples.\nStreaming, sketching and sampling - Estimating distinct elements, Estimating frequency moments – the Alon-Mathias-Szegedy sketch, Johnson-Lindenstrauss lemma based l_2 norm approximation, Heavy-hitters – Count-Min sketch, Reservoir sampling & L_p sampling, Graph streams – connectivity, spanners, sparsifiers.\nProperty testing - Testing graph properties - Comparison of graph property testing models, Szemeredi regularity lemma and testing properties of dense graphs, random walk based testers for sparse graphs, Testing Boolean functions - Fourier analytic methods for testing Boolean functions – linearity, monotonicity, Testing properties of probability distributions – uniformity, monotonicity.\nLower bound techniques - Communication complexity based lower bounds for streaming, Lower bounds for property testing algorithms, connections between communication complexity lower bounds and property testing.\n\n\n\nReferences\n\nConcentration of Measure for the Analysis of Randomized Algorithms – Devdatt Dubashi and Alessandro Panconesi. Cambridge University Press, 1st Edition 2009.\nData Streams: Algorithms and Applications – S. Muthukrishnan, Foundations and Trends in Theoretical Computer Science, 2005.\nSketching Algorithms for Big Data – Lecture notes from a course by Jelani Nelson and Piotr Indyk (Harvard University).\nSublinear (and Streaming) Algorithms – Lecture notes from a course by Paul Beame (University of Washington).\nIntroduction to Property Testing – Oded Goldreich, Cambridge University Press, 1st Edition, 2017.\nCommunication Complexity – Eyal Kushilevitz and Noam Nisan, Cambridge University Press, 2007.\nRecent research papers.\n\n\n\nGrading policy\n\nAssignments: 30%\nScribing and class participation: 10%\nCourse project: 10%\nMid-sem exam: 20%\nEnd-sem exam: 30%\n\n\n\nImportant dates\n\nTutorials: Aug 9, Aug 30, Sep 20, Oct 11, Nov 1\nShort exams: Aug 23, Sep 27, Nov 8\nQuizzes: Sep 7, Oct 19\nEnd-sem: Nov 19\n\n\n\nCourse Materials\n\nMoodle"
  },
  {
    "objectID": "courses/6025/22/index.html",
    "href": "courses/6025/22/index.html",
    "title": "CS6025 Sublinear Algorithms",
    "section": "",
    "text": "Coordinates\n\nWhere: Online\nWhen: J slot; Mon(5-5.50pm), Wed(2-3.15pm), Thur(3.30-4.45pm)\n\n\n\nObjectives\nThe aim of the course is to understand algorithmic techniques to handle large amounts of data that cannot be stored and accessed as a whole. To process such large amounts of data, classical algorithms, even those that are linear-time, are inefficient. Through this course, we will look at techniques to design and analyze algorithms of sublinear time and space complexity. The main focus of the course would streaming, sketching, sampling and property testing algorithms. To complement this, we will also study techniques developed to prove lower bounds against such algorithms.\n\n\nContents\nThe tentative outline of the topics that will be covered in the course is as follows. The order of the topics might vary.\n\nPreliminaries - Tail-bounds (Markov, Chebyshev, Chernoff), Basic linear algebra, motivation and introduction to ideas of streaming, sketching and property testing with simple examples.\nStreaming, sketching and sampling - Estimating distinct elements, Estimating frequency moments – the Alon-Mathias-Szegedy sketch, Johnson-Lindenstrauss lemma based \\(\\ell_2\\) norm approximation, Heavy-hitters – Count-Min sketch, Reservoir sampling & \\(\\ell_p\\) sampling, Graph streams – connectivity, spanners, sparsifiers.\nProperty testing - Testing graph properties - Comparison of graph property testing models, Szemeredi regularity lemma and testing properties of dense graphs, random walk based testers for sparse graphs, Testing Boolean functions - Fourier analytic methods for testing Boolean functions – linearity, monotonicity, Testing properties of probability distributions – uniformity, monotonicity.\nLower bound techniques - Communication complexity based lower bounds for streaming, Lower bounds for property testing algorithms, connections between communication complexity lower bounds and property testing.\n\n\n\nReferences\n\n[DP] Concentration of Measure for the Analysis of Randomized Algorithms – Devdatt Dubashi and Alessandro Panconesi.\n[M] Data Streams: Algorithms and Applications – S. Muthukrishnan.\n[IN] Sketching Algorithms for Big Data – Lecture notes from a course by Jelani Nelson and Piotr Indyk (Harvard University).\n[B] Sublinear (and Streaming) Algorithms – Lecture notes from a course by Paul Beame (University of Washington).\n[G] Introduction to Property Testing – Oded Goldreich.\n[RY] Communication Complexity – Anup Rao and Amir Yehudayaoff.\n\n\n\nGrading policy\n\nProblem sets: 30% (best 3/4)\nCourse project: 20%\nMid-sem: 20%\nEnd-sem + Viva: 30%\n\n\n\nImportant dates\n\nProblem sets (tentative): Jan 28, Feb 25, Apr 1, Apr 15\nMid-sem: Mar 10\nEnd-sem: May 4\n\n\n\nCourse Materials\n\nMoodle\nLectures and References (with links to the videos and notes)\nCourse project\nProblem sets: 1, 2, 3"
  },
  {
    "objectID": "courses/6840/21/index.html",
    "href": "courses/6840/21/index.html",
    "title": "CS6840 Modern Complexity Theory",
    "section": "",
    "text": "Coordinates\n\nWhere: Online\nWhen: J slot (Mon: 17 - 17.50; Wed: 14 - 15.15; Thu: 15.30 - 16.45)\n\n\n\nObjectives\nThis course continues from CS6014 - Computability and Complexity, as we explore more recent topics in complexity theory.\n\n\nContents\nThe following is a brief overview of the topics that will be covered in this course. The order of the topics covered may vary. - Complexity of counting problems - Non-uniform models and circuit complexity - BPP vs P - Hardness vs Randomness - Interactive Proofs and PCPs\n\n\nReferences\n[K]: Theory of Computation - Dexter C. Kozen\n[AB]: Computational Complexity: A Modern Approach - Sanjeev Arora and Boaz Barak\n[DK]: Theory of Computational Complexity - Ding-Zhu Du and Ker-I Ko\nThere are a large number of lecture notes and resources available online, which we will refer to during the course.\n\n\nGrading policy\nAssignments: 40% (best 4/5)\nScribing: 10%\nCourse reading: 20%\nMid-sem: 10%\nEnd-sem + viva: 20%\n\n\nImportant dates\nProblem Sets (deadlines): Feb 28, Mar 14, Apr 11, Apr 25, May 9\nMid-sem: Mar 25\nEnd-sem: May 13\n\n\nCourse Materials\nMoodle\nLectures and references\nProblem Sets: 1, 2, 3, 4"
  },
  {
    "objectID": "courses/2800/23/index.html",
    "href": "courses/2800/23/index.html",
    "title": "CS2800 Design and Analysis of Algorithms",
    "section": "",
    "text": "aboutcontentsadministrivialectures\n\n\n\nCoordinates\n\nWhere: CS15\nWhen: B slot - Mon (9 am), Tue (8 am), Wed (1 pm), Fri (11 am)\n\n\n\nInstructor\n\nYadu Vasudev\nSSB 207\nyadu@cse.iitm.ac.in\n\n\n\nTAs\nAbhijit, Ankit, Anmol, Barenya, Bibhuti, Keshav, Ravi, Sampriti, Souradipta, Susmit\n\n\n\n\nAbout this course\nThis course is an introductory course on the design and analysis of algorithms. It serves as a recommended, and sometimes necessary, prerequisite for almost all courses in the area of theoretical computer science offered in the CSE department. The emphasis is on understanding some basic design principles that can be applied in a variety of algorithmic questions. That said, these principles are neither exhaustive nor applicable in all situations. The hope is that the student gets sufficient background to think in a principled manner when confronted with a new computational question.\nPrerequisites: The course on programming and data structures (CS2700/CS2705) is a necessary prerequisite for the course. In particular, I will assume that you know the following (which are typically covered in CS2700/CS2705): - The concept of an abstract data type and the difference between ADTs and data structures. - Basic ADTs like stacks, queues, priority queues. Basic data structures like arrays, linked lists, heaps, simple BSTs and operations on them. - The concept of pseudocode, and the difference between pseudocode and a computer program. - Algorithms for sorting, searching, and basic algorithms on graphs. - The concept of asymptotic analysis, and the definitions of \\(O(\\cdot), \\Omega(\\cdot)\\), and \\(\\Theta(\\cdot)\\) as well as \\(o(\\cdot)\\) and \\(\\omega(\\cdot)\\).\nThe course will require you to design algorithms, and then mathematically prove their correctness. There will not be any programming component for this course, though you may be required to implement a few of the algorithms if you take the lab course Object-Oriented Analysis, Implementation and Algorithms (OOAIA, CS2810).\n\n\n\nCourse contents\nThe course will look at some basic algorithm design techniques using examples. The contents of the course include the following topics:\n\nRecursion and divide-and-conquer algorithms\nDynamic programming\nGreedy algorithms\nGraph algorithms like shortest path, minimum spanning trees\nBrief introduction to intractability\nAdvanced topics (based on time): Randomization in algorithms, network flows, linear programming\n\nThe topics included above will be covered at different depths, and the order in which they are covered will also vary.\n\n\n\nCourse resources\nThere are many textbooks and resources (both offline and online) that cover most of the material presented in the list above. We will not be following one textbook. Our main sources of reference will be the following textbooks.\n\nAlgorithms by Jeff Erickson - This book is freely available online and contains a large number of exercises with varying degrees of difficulty. This is a fairly recent book.\nAlgorithm Design by Jon Klienberg and Eva Tardos - A slightly older textbook than the one by Erickson, this contains most of the material given in the course contents. It also contains chapters on topics that one might see in a slightly more advanced course. Copies are available in the library and the Indian edition is not too pricey (in case you are planning to buy).\nIntroduction to Algorithms by Cormen ,Leiserson, Rivest and Stein (referred to as CLRS) - An old textbook, currently in its 4th edition. Copies are available in the library, and Indian editions (for the 2nd and 3rd editions) are not pricey.\nAlgorithms by Dasgupta, Papadimitriou and Vazirani - Another nice book on algorithm design. Contains some topics that are not dealt properly in the three earlier books. Copies of the book are available in the library, but I am unable to find a cheap Indian edition of this book.\n\nApart from this, there are a lot of resources available online. We may refer to them occasionally. All these books contain a number of exercise problems for practice.\n\n\n\n\nWeekly schedule\n\nLectures: Mon (9 am), Tue (8 am), Wed (1 pm)\nTutorials: Fri (11 am)\n\nThe Friday slot will be used for tutorials. This includes both ungraded practice tutorials, as well as mini-quizzes. Please see the details below to know the dates for the mini-quizzes and ungraded tutorials. We will stick to this schedule unless there is some unforeseen change in the academic calendar.\n\n\n\nGrading policy (tentative)\nThe course will be evaluated through a series of quizzes and finally the end-sem. I will be releasing problem sets on a weekly basis, and we will have tutorial sessions to discuss the these problems and possible approaches to solving them. The tentative grading scheme is as follows.\n\n\n\n\n\n\n\n\nGrading pattern\n\n\n\n\nMini-quizzes: 20% (best 2/4)\nQuiz 1 & 2: 2 * 20 = 40%\nEnd-sem: 40%\n\n\n\n\n\n\n\n\nImportant dates (tentative)\nPlease note the following dates for the ungraded tutorials and mini-quizzes. The dates for Quiz 1,2 and end-semester examination will be as per the institute calendar.\n\n\n\n\n\n\n\n\nDates\n\n\n\n\n\n\n\n\n\n\nPractice tutorials\nJan 20, Jan 27, Feb 10, Feb 17, Feb 24, Mar 3, Mar 17, Mar 24, Mar 31\n\n\nMini quizzes\nFeb 3, Mar 10, Apr 21, Apr 26\n\n\nQuiz 1\nFeb 21\n\n\nQuiz 2\nMar 21\n\n\nEnd-sem\nMay 3\n\n\n\n\n\n\n\n\n\nContact\nPlease sign up on the course discussion forum here. This will be the first point of contact for any issues related to the course. Please do not email me or the TAs unless the issue is specific to you (like missing lectures, correction in grading). Even for such issues, we highly recommend you to message privately using the discussion forum.\nFor general questions related to the course (any comments/doubts), please create a topic in the correct stream and add you question/comment there. You are also welcome to reply and clear the doubts of your friends.\n\n\n\n\n\n\n\n\n  \n    Date\n    Lecture\n  \n  \n    \n       Lecture #1\n        Mon 16/01\n      \n      \n        Introduction to the course; administrative details; algorithms for integer multiplication - what constitutes a good algorithm? \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 0.2 - Erickson\n            \n          \n        \n        PS0 released\n      \n    \n    \n       Lecture #2\n        Tue 17/01\n      \n      \n        Stable marriage problem; Gale-Shapley algorithm and examples \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 1.1 - [KT]\n            \n          \n        \n      \n    \n    \n       Lecture #3\n        Wed 18/01\n      \n      \n        Gale-Shapley algorithm - proof of correctness; properties of the solution and proof of optimality \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 1.1 - [KT]\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #1\n        Fri 20/01\n      \n      \n        Based on Problem set 0\n      \n    \n    \n       Lecture #4\n        Mon 23/01\n      \n      \n        Recall of asymptotic analysis; Divide-and-conquer - Karatsuba's algorithm, recurrence relations, recurrence trees, master theorem \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 1.9 - Erickson\n            \n            \n              Section 2.1, 2.2 - [DPV]\n            \n            \n              Chapter 3 - [CLRS] (asymptotic notation)\n            \n            \n              Section 4.6 - [CLRS] (for a proof of the master theorem)\n            \n          \n        \n        PS1 released\n      \n    \n    \n       Lecture #5\n        Tue 24/01\n      \n      \n        Order statistics - finding the \\(k^{th}\\) smallest element; median-of-medians - recursive solution, analyzing the recurrence using recursion trees \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 1.8 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #6\n        Wed 25/01\n      \n      \n        Convolution of vectors; equivalence with polynomial multiplication; evaluating polynomials on mulitple points; FFT algorithm \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 2.6 - [DPV]\n            \n            \n              FFT notes - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #7\n        Mon 30/01\n      \n      \n        FFT algorithm (contd.); Closest pair of points in 2D \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 2.6 - [DPV]\n            \n            \n              FFT notes - Erickson\n            \n            \n              Section 5.4 - [KT]\n            \n          \n        \n        PS2 released\n      \n    \n    \n       Lecture #8\n        Tue 31/01\n      \n      \n        Basic graph algorithms; adjacency matrices and lists; graph traversals - DFS \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 3.1, 3.2 - [DPV]\n            \n            \n              Chapter 5 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #2\n        Wed 01/02\n      \n      \n        Discussion of Problem Sets 1 and 2\n      \n    \n    \n      \n        Mini quiz #1\n        Fri 03/02\n      \n      \n        Based on material covered in Problem sets 0, 1, 2\n      \n    \n    \n       Lecture #9\n        Mon 06/02\n      \n      \n        BFS; finding connected components in graphs; digraphs - classification of edges \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 3.2, 3.3 - [DPV]\n            \n            \n              Sections 6.1, 6.2 - Erickson\n            \n          \n        \n        PS3 released\n      \n    \n    \n       Lecture #10\n        Tue 07/02\n      \n      \n        DFS with clocks - classification of edges; Topological ordering of DAGs \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 3.3 - [DPV]\n            \n            \n              Section 6.3 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #11\n        Wed 08/02\n      \n      \n        Digraphs and their strongly connected components; Finding and labelling the strongly connected components of a digraph \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 3.4 - [DPV]\n            \n            \n              Sections 6.5, 6.6 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #3\n        Fri 10/02\n      \n      \n        Discussion of Problem set 3\n      \n    \n    \n       Lecture #12\n        Mon 13/02\n      \n      \n        Finding and labelling strongly connected components - Kosaraju-Sharir algorithm; Shortest paths in graphs - BFS \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 3.4,4.2 - [DPV]\n            \n            \n              Sections 6.6,8.4 - Erickson\n            \n          \n        \n        PS4 released\n      \n    \n    \n       Lecture #13\n        Tue 14/02\n      \n      \n        Shortest path in unweighed graphs - BFS (contd); Shortest paths in DAGs \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 4.2,4.7 - [DPV]\n            \n            \n              Sections 8.4,8.5 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #14\n        Wed 15/02\n      \n      \n        Shortest path in graphs - Dijkstra's algorithm \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.4 - [KT]\n            \n            \n              Section 4.4 - [DPV]\n            \n            \n              Section 8.6 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #4\n        Fri 17/02\n      \n      \n        Discussion of Problem set 4\n      \n    \n    \n       Lecture #15\n        Mon 20/02\n      \n      \n        Shortest path in graphs - Dijkstra's algorithm (contd), Bellman-Ford algorithm \n        [slides]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.4 - [KT]\n            \n            \n              Section 4.4 - [DPV]\n            \n            \n              Sections 8.6,8.7 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Quiz #1\n        Tue 21/02\n      \n      \n        Based on material covered till Mon Feb 13\n      \n    \n    \n       Lecture #16\n        Wed 22/02\n      \n      \n        Bellman-Ford algorithm (contd) \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 8.7 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #17\n        Fri 24/02\n      \n      \n        Greedy algorithms - interval scheduling \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.1 - [KT]\n            \n          \n        \n      \n    \n    \n       Lecture #18\n        Mon 27/02\n      \n      \n        Greedy algorithms - scheduling jobs to minimize delays; exchange arguments \n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.2 - [KT]\n            \n          \n        \n        PS5 released\n      \n    \n    \n       Lecture #19\n        Tue 28/02\n      \n      \n        Greedy algorithms - scheduling jobs to minimize delays; exchange arguments; greedy vertex cover \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.2 - [KT]\n            \n          \n        \n      \n    \n    \n       Lecture #20\n        Wed 01/03\n      \n      \n        Huffman coding - optimal prefix codes and binary trees \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.8 - [KT]\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #5\n        Fri 03/03\n      \n      \n        Discussion of Problem set 5\n      \n    \n    \n       Lecture #21\n        Mon 06/03\n      \n      \n        Huffman coding - algorithm and proof of correctness \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.8 - [KT]\n            \n          \n        \n        PS6 released\n      \n    \n    \n       Lecture #22\n        Tue 07/03\n      \n      \n        Huffman coding - implementation details; Minimum spanning trees - cut property \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 4.5, 4.8 - [KT]\n            \n            \n              Section 7.1 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Mini quiz #2\n        Fri 10/03\n      \n      \n        Based on Problem sets 5 and 6\n      \n    \n    \n       Lecture #23\n        Mon 13/03\n      \n      \n        Minimum spanning trees - proof of the cut property; Boruvka's algorithm \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 7.2, 7.3 - Erickson\n            \n          \n        \n        PS7 released\n      \n    \n    \n       Lecture #24\n        Tue 14/03\n      \n      \n        Prim's and Kruskal's algorithms - examples, implementation details, running time \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 7.4, 7.5 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #25\n        Wed 15/03\n      \n      \n        Kruskal's algorithm - amortized analysis; data structures for disjoint sets \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 7.5 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Tutorial #6\n        Fri 17/03\n      \n      \n        Discussion of Problem set 7\n      \n    \n    \n      \n        Quiz #2\n        Tue 21/03\n      \n      \n        Based on material covered through Problems sets 5,6,7\n      \n    \n    \n       Lecture #26\n        Fri 24/03\n      \n      \n        Union-by-rank with path compression; Amortized analysis - accounting method \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 5.1.4 - [DPV]\n            \n          \n        \n      \n    \n    \n       Lecture #27\n        Mon 27/03\n      \n      \n        Union-by-rank with path compression - amortized analysis \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 5.1.4 - [DPV]\n            \n          \n        \n      \n    \n    \n       Lecture #28\n        Tue 28/03\n      \n      \n        Dynamic programming - text segmentation \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 3.3, 3.4 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #29\n        Wed 29/03\n      \n      \n        Dynamic programming - text justification, edit distance \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              class notes\n            \n          \n        \n        PS8 released\n      \n    \n    \n      \n        Tutorial #7\n        Fri 31/03\n      \n      \n        Discussion of Problem set 8\n      \n    \n    \n       Lecture #30\n        Mon 03/04\n      \n      \n        Dynamic programming - edit distance; saving space using divide-and-conquer \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 3.7 - Erickson\n            \n            \n              Sections 6.6, 6.7 - [KT]\n            \n          \n        \n      \n    \n    \n       Lecture #31\n        Wed 05/04\n      \n      \n        Dynamic programming - edit distane (contd.); 0-1 Knapsack - pseudopolynomial-time algorithm \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 6.6, 6.7 - [KT]\n            \n          \n        \n        Online lecture - video link on Zulip\n      \n    \n    \n       Lecture #32\n        Mon 10/04\n      \n      \n        0-1 Knapsack - pseudopolynomial-time algorithm (contd.); Dynamic programming on trees - independent sets \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 3.10 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #33\n        Tue 11/04\n      \n      \n        All Pairs Shortest Paths (APSP) - Johnson's algorithm; Dynamic programming based algorithms \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 9.4, 9.5, 9.6 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #34\n        Wed 12/04\n      \n      \n        Floyd-Warshall algorithm; APSP and matrix multiplication \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 9.7, 9.8 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #35\n        Mon 17/04\n      \n      \n        APSP and matrix multiplication - Seidel's algorithm; Introduction to computational intractability \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Section 4.4 - Anupam Gupta's lecture notes\n            \n            \n              Seidel's paper\n            \n          \n        \n        PS9 released\n      \n    \n    \n       Lecture #36\n        Tue 18/04\n      \n      \n        Introduction to intractability - P and NP; poly-time solving versus poly-time verification \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Sections 34.1, 34.2 - [CLRS]\n            \n            \n              Sections 12.1, 12.2 - Erickson\n            \n          \n        \n      \n    \n    \n       Lecture #37\n        Wed 19/04\n      \n      \n        Polynomial-time reductions - NP completeness, examples of reductions \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Chapter 12 - Erickson\n            \n          \n        \n      \n    \n    \n      \n        Mini quiz #3\n        Fri 21/04\n      \n      \n        Based on Problem set 8\n      \n    \n    \n       Lecture #38\n        Mon 24/04\n      \n      \n        NP-completeness - examples of reductions \n        [notes]\n        \n          \n            \n              \n            \n            \n              References\n            \n          \n          \n            \n              Chapter 12 - Erickson\n            \n          \n        \n        PS10 released\n      \n    \n    \n       Lecture #39\n        Tue 25/04\n      \n      \n        Beyond NP-completeness - brief overview; Wrap-up of the course \n      \n    \n    \n      \n        Mini quiz #4\n        Wed 26/04\n      \n      \n        Based on Problem set 9\n      \n    \n  \n\n\nNo matching items"
  },
  {
    "objectID": "courses/2200/20/index.html",
    "href": "courses/2200/20/index.html",
    "title": "CS2200 Languages, Machines, and Computation",
    "section": "",
    "text": "Coordinates\n\nWhere: CS 36\nWhen: D slot (Mon 11-11.50, Tue 10-10.50, Wed 9-9.50, Thu 13-13.50)\n\n\n\nTAs\n\nAnil Kumar S (cs18d001@smail)\nAnoop S K M (cs18d003@smail)\nAthul M A (cs19m015@smail)\nGovind Sankar (ee16b109@smail)\nSampriti Roy (cs18s007@smail)\nSreyas S (cs18d010@smail)\n\n\n\nObjectives\nThis course provides an introduction to the mathematical theory of computation. The course gives a preliminary exposure to theoretical computer science, and the formal relationships among machines and computational problems with the aim of understanding the nature of computation and its inherent limits.\n\n\nContents\nThe following is a brief overview of the topics that will be covered in this course. The order of the topics covered may vary. - Finite-State Machines and Regular Languages: Languages vs Computational problems, Deterministic and non-deterministic finite state automata, regular languages, closure properties, limitations - pumping lemma and Myhill-Nerode relations, state minimization, equivalent models, algorithmic questions. - Context-Free Grammars: Grammars, Chomsky hierarchy, normal forms, closure properties, limitations - pumping lemma, algorithmic questions - parsing algorithm, equivalent models - push-down automata. - Computability Theory - Turing machines, equivalence between different variants, Universal Turing machine, recursively enumerable and recursive sets of languages, Decidability - Halting Problem, Post’s correspondence problem, Rice’s theorem, Church-Turing thesis. - Basic Complexity Theory - Measures of complexity, complexity classes P and NP, notion of polynomial-time reducibility, NP-completeness, satisfiability and Cook’s theorem.\n\n\nReferences\n\n[K]: Automata and Computability - Dexter C. Kozen\n[HMU]: Introduction to Automata Theory, Languages and Computation - Hopcroft, Motwani and Ullman.\n[S]: Introduction to the Theory of Computation - Michael Sipser\n\n\n\nGrading policy\n\nPop quizzes: 5%\nShort exams: 3*5 = 15%\n\nQuizzes: 2*20 = 40%\nEnd-sem: 40%\n\n\n\nImportant dates\n\nShort exams: Feb 6, Mar 12\nQuizzes: Feb 20\n\n\n\nCourse Materials\n\nMoodle\nLectures and references"
  },
  {
    "objectID": "courses/6014/20/lectures.html",
    "href": "courses/6014/20/lectures.html",
    "title": "CS6014 Computability and Complexity",
    "section": "",
    "text": "The lecture videos and the notes written during the lectures are available below.\n\nLectures\nSlides and Scribbles\n\n\nWeek 1\n\nAdministrative details about the course; Introduction to the course; Historical perspective; Turing machines; Configuration and acceptance condition; Examples; Definition of recursive languages and recursive enumerability; Equivalent models; Tape-reduction theorem.\n\n\n\nReferences: [K1] - Chapters 28, 29, 30\n\n\n\nWeek 2\n\nEnumerator machines; Turing machine encodings; Diagonalization - Existence of languages that are not recursively enumerable; Universal Turing machines; The universal language and the membership problem; Undecidability of the membership problem; Halting problem is undecidable; Examples of languages that are not recursively enumerable; Comparing the halting problem and the membership problem.\n\n\n\nReferences: [K1] - Chapters 28, 29, 30, 31\n\n\n\nWeek 3\n\nUndecidability; Reducibilities - Turing reductions and many-one reductions; Properties of many-one reductions; examples; examples of languages that are not r.e; Rice’s theorem - examples and non-examples, proof; Rice-McNaughton-Myhill-Shapiro theorem about non-monotone properties of r.e lannguages and proof.\n\n\n\nReferences: [K1] - Chapters 31, 32, 33, 34\n\n\n\nWeek 4\n\nFirst-order theory of numbers, example sentences, Peano’s axiomatization, notion of a proof, statement of Gödel’s incompleteness theorem. Proof of incompleteness theorem - the set of theorems in Peano’s axiomatization is recursively enumerable whereas the set of true statements in first-order number theory is not.\n\n\n\nReferences: [K1] - Chapters 38,39\n\n\n\nWeek 5\n\nOracle Turing Machines; Halting problem of TMs with oracle access to the Halting problem; Arithmetic Hierarchy - the first levels; Inclusions and separations; FIN is in \\(\\Sigma_2\\); \\(\\text{MP}^{\\text{MP}}\\) is complete for \\(\\Sigma_2\\); Quantifier characterization of the arithmetic hierarchy.\n\n\n\nReferences: [K1] - Supplementary Lecture J, [K2] - Chapter 35\n\n\n\nWeek 6\n\nProof of the quantifier characterization of the arithmetic hierarchy; placing FIN, REG, COF, TOTAL in the hierarchy using the characterization; FIN is \\(\\Sigma_2\\)-complete using the characterization; Tarski’s undefinability theorem; Productive sets - definition and properties; R.E-intermediate languages - Post’s theorem; From productive sets to simple sets; Construction of a simple set.\n\n\n\nReferences: [K1] - Supplementary Lecture J, [K2] - Chapter 35, 37\n\n\n\nWeek 7\n\nNotion of a computational resource, deterministic time, multi-tape vs single-tape simulations, crossing sequences, quadratic lower bounds on single-tape machines.\n\n\n\nReferences: [K2] - Chapter 1\n\n\n\nWeek 8\n\nLinear speed-up theorem, Time hierarchy theorem, simulating multi-tape TMs using 2-tape TMs (Hennie-Stearns construction), translation and padding, time constructibility is necessary - Borodin-Trachtenbrot Gap theorem.\n\n\n\nReferences: [AB] - Chapter 3, [DK] - Chapter 1\n\n\n\nWeek 9\n\nProof of the Gap theorem; Space complexity; Robust complexity classes - P,EXP,L,PSPACE; Tape compression, universal TM simulation and the space-hierarchy theorem; Savitch’s theorem; Non-deterministic time and space - simulations and inclusions.\n\n\n\nReferences: [AB] - Chapter 3, [DK] - Chapter 1\n\n\n\nWeek 10\n\nNon-deterministic time-hierarchy theorem; certificates and efficient verification - witness characterization of \\(\\mathsf{NP}\\); \\(\\mathsf{NP}\\) and \\(\\mathsf{coNP}\\); the \\(\\mathsf{P}\\) vs \\(\\mathsf{NP}\\) problem; reductions and completeness - the canonical \\(\\mathsf{NP}\\)-complete problem; examples of poly-time many-one reductions; parsimonious reductions.\n\n\n\nReference: [AB] - Chapters 2,3; [DK] - Chapters 1,2\n\n\n\nWeek 11\n\nCook-Levin theorem; decision and search - self-reducibility; PSPACE completeness -TQBF and winning strategies; logspace reductions - P-completeness and NL-completeness.\n\n\n\nReferences: [AB] - Chapter 4\n\n\n\nWeek 12\n\nNL-completeness - STCONN and 2SAT; Immerman-Szelepscenyi theorem; Relativization barrier - the Baker-Gill-Solovay theorem.\n\n\n\nReferences: [AB] - Chapter 4, [K2] - Chapter 4\n\n\n\nWeek 13\n\nOracle Turing Machines and the Polynomial-time Hierarchy; non-uniform algorithms for SAT - the Karp-Lipton theorem; Probabilistic Complexity - Las Vegas and Monte-Carlo algorithms; the class \\(\\mathsf{BPP}\\).\n\n\n\nReferences: [AB] - Chapter 5\n\n\n\nWeek 14\n\nProbabilistic Complexity - Las Vegas and Monte-Carlo algorithms; \\(\\mathsf{BPP}\\) vs \\(\\mathsf{ZPP}\\); amplification of success probability of \\(\\mathsf{BPP}\\) algorithms - \\(\\mathsf{BPP} \\subseteq \\mathsf{P}/\\mathsf{poly}\\); BPP and the polynomial hierarchy.\n\n\n\nReferences: [AB] - Chapter 7"
  }
]